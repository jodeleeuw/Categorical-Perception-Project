n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
# one subject failed training
# filter out all subjects in the fail_subjects list
filterdata <- filterdata[!filterdata$mturk_id %in% fail_subjects,]
###
fail_subjects
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(pilotdata$distance)
pilotdata$xdist       <- as.numeric(pilotdata$xdist)
pilotdata$ydist       <- as.numeric(pilotdata$ydist)
pilotdata$correct     <- as.numeric(pilotdata$correct)
pilotdata$block       <- as.numeric(pilotdata$block)
pilotdata$sim_score   <- as.numeric(pilotdata$sim_score)
pilotdata$rt          <- as.numeric(pilotdata$rt)
pilotdata$trial_index <- as.numeric(pilotdata$trial_index)
pilotdata$trial_idx   <- as.numeric(pilotdata$trial_idx)
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
fail_subjects
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(pilotdata$distance)
pilotdata$xdist       <- as.numeric(pilotdata$xdist)
pilotdata$ydist       <- as.numeric(pilotdata$ydist)
pilotdata$correct     <- as.numeric(pilotdata$correct)
pilotdata$block       <- as.numeric(pilotdata$block)
pilotdata$sim_score   <- as.numeric(pilotdata$sim_score)
pilotdata$rt          <- as.numeric(pilotdata$rt)
pilotdata$trial_index <- as.numeric(pilotdata$trial_index)
pilotdata$trial_idx   <- as.numeric(pilotdata$trial_idx)
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
fail_subjects
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(as.character(pilotdata$distance))
pilotdata$xdist       <- as.numeric(as.character(pilotdata$xdist))
pilotdata$ydist       <- as.numeric(as.character(pilotdata$ydist))
pilotdata$correct     <- as.numeric(as.character(pilotdata$correct))
pilotdata$block       <- as.numeric(as.character(pilotdata$block))
pilotdata$sim_score   <- as.numeric(as.character(pilotdata$sim_score))
pilotdata$rt          <- as.numeric(as.character(pilotdata$rt))
pilotdata$trial_index <- as.numeric(as.character(pilotdata$trial_index))
pilotdata$trial_idx   <- as.numeric(as.character(pilotdata$trial_idx))
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(as.character(pilotdata$distance))
pilotdata$xdist       <- as.numeric(as.character(pilotdata$xdist))
pilotdata$ydist       <- as.numeric(as.character(pilotdata$ydist))
pilotdata$correct     <- as.numeric(as.character(pilotdata$correct))
pilotdata$block       <- as.numeric(as.character(pilotdata$block))
pilotdata$sim_score   <- as.numeric(as.character(pilotdata$sim_score))
pilotdata$rt          <- as.numeric(as.character(pilotdata$rt))
pilotdata$trial_index <- as.numeric(as.character(pilotdata$trial_index))
pilotdata$trial_idx   <- as.numeric(as.character(pilotdata$trial_idx))
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
# one subject failed training
# filter out all subjects in the fail_subjects list
filterdata <- filterdata[!filterdata$mturk_id %in% fail_subjects,]
###
### filter out subjects with 0 sd on sim score
# these subjects should be removed because they did not complete
# the task as instructed
sd_by_subj_sim <- ddply(filterdata[filterdata$test_type=="SIM" & filterdata$trial_type=="similarity",], .(mturk_id), function(subset)with(subset,c(sd_sim=sd(sim_score))))
sd_0_subjects <- as.character(sd_by_subj_sim[sd_by_subj_sim$sd_sim==0,]$mturk_id)
# no subjects had this
###
### filter out subjects who pressed the same key for every test trial
# these subjects should be removed because they did not complete
# the task as instructed
sd_key_press <- ddply(filterdata[filterdata$trial_type=="xab" | filterdata$trial_type=="same-different",], .(mturk_id), function(subset)with(subset,c(sd_key=sd(key_press))))
sd_0_key_subjects <- as.character(sd_key_press[sd_key_press$sd==0,]$mturk_id)
View(pilotdata)
View(filterdata)
View(filterdata)
furtherdown <- filterdata[1000:2000,]
View(furtherdown)
View(sd_key_press)
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(as.character(pilotdata$distance))
pilotdata$xdist       <- as.numeric(as.character(pilotdata$xdist))
pilotdata$ydist       <- as.numeric(as.character(pilotdata$ydist))
pilotdata$correct     <- as.numeric(as.character(pilotdata$correct))
pilotdata$block       <- as.numeric(as.character(pilotdata$block))
pilotdata$sim_score   <- as.numeric(as.character(pilotdata$sim_score))
pilotdata$rt          <- as.numeric(as.character(pilotdata$rt))
pilotdata$trial_index <- as.numeric(as.character(pilotdata$trial_index))
pilotdata$trial_idx   <- as.numeric(as.character(pilotdata$trial_idx))
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
# one subject failed training
# filter out all subjects in the fail_subjects list
filterdata <- filterdata[!filterdata$mturk_id %in% fail_subjects,]
###
### filter out subjects with 0 sd on sim score
# these subjects should be removed because they did not complete
# the task as instructed
sd_by_subj_sim <- ddply(filterdata[filterdata$test_type=="SIM" & filterdata$trial_type=="similarity",], .(mturk_id), function(subset)with(subset,c(sd_sim=sd(sim_score))))
sd_0_subjects <- as.character(sd_by_subj_sim[sd_by_subj_sim$sd_sim==0,]$mturk_id)
# no subjects had this
###
### filter out subjects who pressed the same key for every test trial
# these subjects should be removed because they did not complete
# the task as instructed
sd_key_press <- ddply(filterdata[filterdata$trial_type=="xab" | filterdata$trial_type=="same-different",], .(mturk_id), function(subset)with(subset,c(sd_key=sd(key_press))))
sd_0_key_subjects <- as.character(sd_key_press[sd_key_press$sd==0,]$mturk_id)
# no subjects had this
###
#### SECTION: Subject by condition count ####
subcount <- ddply(filterdata, .(mturk_id, exp_condition), function(subset){return(1)})
table(subcount$exp_condition)
View(subcount)
require(plyr)
require(sciplot)
require(ez)
require(ggplot2)
require(ggthemes)
#### SECTION: load all data ####
pilotdata <- read.csv2('pilot_flipped_dimensions.csv', quote = "''")
#### SECTION: get data columns in proper format ####
pilotdata$ts        <- strftime(as.POSIXlt(pilotdata$ts),format='%Y-%m-%d %H:%M:%S')
pilotdata$distance    <- as.numeric(as.character(pilotdata$distance))
pilotdata$xdist       <- as.numeric(as.character(pilotdata$xdist))
pilotdata$ydist       <- as.numeric(as.character(pilotdata$ydist))
pilotdata$correct     <- as.numeric(as.character(pilotdata$correct))
pilotdata$block       <- as.numeric(as.character(pilotdata$block))
pilotdata$sim_score   <- as.numeric(as.character(pilotdata$sim_score))
pilotdata$rt          <- as.numeric(as.character(pilotdata$rt))
pilotdata$trial_index <- as.numeric(as.character(pilotdata$trial_index))
pilotdata$trial_idx   <- as.numeric(as.character(pilotdata$trial_idx))
# add a column that indicates category_type (WITHIN v BETWEEN)
pilotdata$category_type <- sapply(pilotdata$comparison_type,function(ct) {
if(ct=="ww" || ct=="pp") { return("WITHIN") }
if(ct=="pw" || ct=="wp") { return("BETWEEN")}
return(NA)
})
#### SECTION: subject count ####
n_subjects <- as.character(unique(pilotdata$mturk_id))
#### SECTION: filter data ####
### duplicate subjects
# somehow at least one subject did the experiment twice, even though
# this should have been impossible. let's remove all the subjects who
# did the experiment more than once
# filter data to look only at perceptual testing trials
test_data <- pilotdata[pilotdata$trial_type == "similarity" | pilotdata$trial_type == "xab" | pilotdata$trial_type == "same-different",]
# count how many trials each subject did
# subjects in XAB and SIM conditions should be 144
# subjects in SD condition should be 216
count_by_subj <- ddply(test_data, .(mturk_id), function(subset)with(subset,c(rows=nrow(subset))))
# find all subjects with more than 216 trials
repeat_subjects <- as.character(count_by_subj[count_by_subj$rows > 216,]$mturk_id)
# there are 8 subjects who did this
# filter those subjects out
filterdata <- pilotdata[!pilotdata$mturk_id %in% repeat_subjects,]
###
### subjects who failed training
# this function will figure out if someone failed training based on whether their
# accuracy on five consecutive training blocks is below 60%
fail_detector <- function(acc_array){
con_blocks_under = 0
for(i in 1:length(acc_array)){
if(acc_array[i] < 0.60){con_blocks_under = con_blocks_under+1}
else { con_blocks_under = 0}
}
return(con_blocks_under>=5)
}
# this function runs the fail_detector function on each subject and builds a table to determine whether they
# passed or failed training
subject_fail_table <- function(d_block){
b = ddply(d_block, .(block), function(subset)with(subset, c(acc = mean(as.numeric(as.character(correct))))))
c = fail_detector(b$acc)
return(c)
}
# run the subject_fail_table method on the data, fail_subjects will be a list of all the subjects that FAILED training
training_data <- filterdata[filterdata$trial_type == "adaptive_t" | filterdata$trial_type == "adaptive_train",]
df = ddply(training_data, .(mturk_id, exp_condition, stim_type), function(subset)subject_fail_table(subset))
fail_subjects = as.character(df[df$V1=="TRUE",]$mturk_id)
# one subject failed training
# filter out all subjects in the fail_subjects list
filterdata <- filterdata[!filterdata$mturk_id %in% fail_subjects,]
###
### filter out subjects with 0 sd on sim score
# these subjects should be removed because they did not complete
# the task as instructed
sd_by_subj_sim <- ddply(filterdata[filterdata$test_type=="SIM" & filterdata$trial_type=="similarity",], .(mturk_id), function(subset)with(subset,c(sd_sim=sd(sim_score))))
sd_0_subjects <- as.character(sd_by_subj_sim[sd_by_subj_sim$sd_sim==0,]$mturk_id)
# no subjects had this
###
### filter out subjects who pressed the same key for every test trial
# these subjects should be removed because they did not complete
# the task as instructed
sd_key_press <- ddply(filterdata[filterdata$trial_type=="xab" | filterdata$trial_type=="same-different",], .(mturk_id), function(subset)with(subset,c(sd_key=sd(key_press))))
sd_0_key_subjects <- as.character(sd_key_press[sd_key_press$sd==0,]$mturk_id)
# no subjects had this
###
#### SECTION: Subject by condition count ####
subcount <- ddply(filterdata, .(mturk_id, exp_condition), function(subset){return(1)})
table(subcount$exp_condition)
#### SECTION: Trials to complete training ####
# filter the data to look only at training trials
training_trials <- filterdata[filterdata$trial_type=="adaptive_t" | filterdata$trial_type=="adaptive_train",]
# count the number of rows associated with each mturk_id in this data set
training_trial_count <- ddply(training_trials, .(mturk_id, stim_type), function(subset)with(subset, c(len = nrow(subset))))
# visualize trials based on stim type
layout(1)
bargraph.CI(stim_type,len,data=training_trial_count)
training_trial_count
View(training_trial_count)
